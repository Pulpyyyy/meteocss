{# Importation des configurations de base et des conditions météo #}
{% import 'meteo_settings.jinja' as config %}

{# ############################################# #}
{# Macro pour la génération de nombres décimaux aléatoires entre 0 et 1 #}
{%- macro _random() -%}
    {%- set ns=namespace(rnd=1) -%}
    {%- set n=2%}
    {%- for i in range(0,n) -%}
        {%- set r=range(0, 100000) | random -%}
        {%- set ns.rnd = ns.rnd * range(0, 100000) | random -%}
    {%- endfor -%}
    {{ns.rnd/(100000**n)}}
{%- endmacro -%}

{# Macro pour la génération de nombres décimaux aléatoires avec des bornes et des pas variables #}
{%- macro _random(min=0,max=10,step=1) -%}
  {{ ((range(min,max+step)| random) // step)*step }}
{%- endmacro -%}

{%- macro _weather_matrix(weather='') -%}
    {%- set current_weather = 'default' -%}
    {%- if weather in config.conditions %}
        {%- set current_weather = weather %}
    {%- elif weather in ['exceptional','hail'] -%}
        {%- set current_weather = 'rainy' -%}
    {%- elif weather in ['windy-variant'] -%}
        {%- set current_weather = 'cloudy' -%}
    {%- elif weather in ['Ciel clair'] -%}
        {%- set current_weather = 'clear-night' -%}
    {%- elif weather in ['Pluies orageuses'] -%}
        {%- set current_weather = 'pouring' -%}
    {%- elif weather in [
        "Bruine / Pluie faible",
        "Bruine",
        "Pluie faible",
        "Pluies éparses / Rares averses",
        "Pluies éparses",
        "Rares averses",
        "Pluie modérée",
        "Pluie / Averses",
        "Averses",
        "Averses faibles",
        "Pluie",
    ] -%}
        {%- set current_weather = 'rainy' -%}
    {%- elif weather in [
        "Ciel voilé",
        "Ciel voilé nuit",
        "Éclaircies",
        "Eclaircies",
        "Peu nuageux",
    ] -%}
        {%- set current_weather = 'partlycloudy' -%}
    {%- endif -%}
    {{ current_weather }}
{%- endmacro -%}

{# ############################################# #}
{# Macro de génération de la lune et du soleil #}
{%- macro _sky_common(margin_top, sun_left, sun_top, elevation = state_attr('sun.sun','elevation'), rising = state_attr('sun.sun','rising'), below_horizon = is_state('sun.sun', 'below_horizon'), current_weather = states(config.location )) -%}

    {# Gestion des conditions météo exceptionnelles #}
    {%- set current_weather = _weather_matrix(current_weather) %}
    "
        ha-card {
            margin-top: {{ margin_top }};
            width: 100%;
            top: 0;
            left: 0;
            flex: 1;
            position: relative;
            background: radial-gradient(
                at {{ sun_left }}% {{ sun_top }}%, 
                {%- if below_horizon | bool -%}
                    {{ config.conditions[current_weather]['night_sky'] }}
                {%- else -%}
                    {%- if elevation |int(0) < 5 -%}
                        {%- if rising | bool -%}
                            {{config.sunrise_day}}
                        {%- else -%}
                            {{config.sunset_day}}
                        {%- endif -%}
                    {%- else -%}
                        {{ config.conditions[current_weather]['day_sky'] }}
                    {%- endif -%}
                {%- endif -%}
            );
            overflow: hidden;
        }
    "
{%- endmacro -%}

{%- macro sky(inverse=false, demo=false) -%}
    {%- if demo -%}
        {%- if inverse | bool-%}
            {{ _sky_common('-4%', sun_left=states('sensor.sun_left_inverse_demo'), sun_top=states('sensor.sun_top_inverse_demo'), elevation = states('input_number.solar_elevation_demo'), rising=states('input_boolean.rising_demo'), below_horizon=states('binary_sensor.sun_below_horizon_demo'), current_weather=states('input_select.weather_condition_demo')) }}
        {%- else -%}
            {{ _sky_common('-1%', sun_left=states('sensor.sun_left_demo'), sun_top=states('sensor.sun_top_demo'), elevation = states('input_number.solar_elevation_demo'), rising=states('input_boolean.rising_demo'),  below_horizon=states('binary_sensor.sun_below_horizon_demo'), current_weather=states('input_select.weather_condition_demo')) }}
        {%- endif -%}
    {%- elif inverse | bool-%}
        {{ _sky_common('-4%', states('sensor.sun_left_inverse'), states('sensor.sun_top_inverse')) }}
    {%- else -%}
        {{ _sky_common('-1%', states('sensor.sun_left'), states('sensor.sun_top')) }}
    {%- endif -%}
{%- endmacro -%}

{# ############################################# #}
{# https://codepen.io/ericadu/pen/REQOGE #}
{%- macro _stars_html(num_stars = 100, num_shots = 2) -%}
    "
    {%- for i in range(0,num_stars|int(0)+1) -%}
        <div class='star star-{{i}}'></div>
    {%- endfor -%}
    {%- for n in range(0,num_shots|int(0)+1) -%}
        <div class='shot shot-{{n}}'></div>
    {%- endfor -%}
    "
{%- endmacro -%}

{%- macro _stars_css(num_stars = 100, num_shots  =2) -%}
    {%- set ns = namespace(stars='\n.star {
        position: absolute;
            width: 2px;
            height: 2px;
            border-radius: 1px;
            background: #fff;
        }',
        shots='.shot {
                position: absolute;
                width: 3px;
                height: 3px;
                background: #fff;
            }
            .shot::after {
                content: "";
                display: block;
                position: absolute;
                width: 80px;
                height: inherit;
                top: 0;
                left: 0;
                background: linear-gradient(to left, rgba(255, 255, 255, 0) 0%, white 100%);
            }
        ')
    -%}
    {%- for i in range(0,num_stars|int(0)+1) -%}
        {%- set ns.stars = ns.stars ~ '
        .star-'~i~' {
            top: '~ _random(0,100) ~'%;
            left: '~ _random(0,100) ~'%;
            animation: '~ (_random(0,30)|int(0)+30)/10 ~'s star '~ _random(0,50)|int(0)/-10 ~'s infinite;
        }'
        -%}
    {%- endfor -%}
    {%- set ns.stars = ns.stars ~ '
        @keyframes star {
        to {
            opacity: 0.3;
            }
        }
        '
    -%}

    {%- for n in range(0,num_shots|int(0)+1) -%}
        {%- set ns.shots = ns.shots ~ '
            .shot-'~n~' {
                top: '~ _random(0,20) ~'%;
                left: '~ _random(0,100) ~'%;
                animation: '~ (_random(0,30)|int(0)+30)/10 ~'s shot '~ _random(0,50)|int(0)/-10 ~'s infinite;
            }'
        -%}
    {%- endfor -%}

    {%- set ns.shots = ns.shots ~ '
        @keyframes shot {
        0% {
            transform: translateY(0px) translateX(0px) rotate(-135deg);
            opacity: 0;
        }
        100% {
            transform: translateY(100vh) translateX(100vw) rotate(-135deg);
            opacity: 1;
        }
        }
    '
    -%}
    "{{ns.stars}}{{ns.shots}}"
{%- endmacro -%}
{# ############################################# #}
{# Macros pour générer de la pluie #}
{# https://codepen.io/jh3y/pen/WyNdMG #}
{%- macro _rain_html(num_drops=25) -%}
    {%- set ns = namespace(rain="") -%} 
    {%- set ns.rain=ns.rain ~ "<div class='rain'>" -%}
    {%- for d in range(1,num_drops) -%}
        {%- set ns.rain=ns.rain ~"<svg class='rain__drop' preserveAspectRatio='xMinYMin' viewBox='0 0 5 50' style='--x: "~_random(1,99)~"; --y: "~_random(1,99)~"; --o: "~_random()~"; --a: "~(_random()|float(0)+0.5)~"; --d: -"~(_random()|float(0)* 2 - 1 )~"; --s: "~_random()~"'><path stroke='none' d='M 2.5,0 C 2.6949458,3.5392017 3.344765,20.524571 4.4494577,30.9559 5.7551357,42.666753 4.5915685,50 2.5,50 0.40843152,50 -0.75513565,42.666753 0.55054234,30.9559 1.655235,20.524571 2.3050542,3.5392017 2.5,0 Z'></path></svg>" -%}
    {%- endfor%}
    {%- set ns.rain=ns.rain ~"" -%} {# FIX </DIV> #}
    {{ns.rain}}
{%- endmacro -%}

{# Macro pour générer le CSS de la pluie avec animation #}
{%- macro _rain_css() -%}
    "
    .rain__drop {
        -webkit-animation-delay: calc(var(--d) * 1s);
        animation-delay: calc(var(--d) * 1s);
        -webkit-animation-duration: calc(var(--a) * 1s);
        animation-duration: calc(var(--a) * 1s);
        -webkit-animation-iteration-count: infinite;
        animation-iteration-count: infinite;
        -webkit-animation-name: drop;
        animation-name: drop;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
        height: 40px;
        left: calc(var(--x) * 1%);
        position: absolute;
        top: calc((var(--y) + 50) * -1px);
    }
    .rain__drop path {
        fill: #fefefe;
        opacity: var(--o);
        transform: scaleY(calc(var(--s) * 1.5));
    }
    @-webkit-keyframes drop {
        90% {
            opacity: 1;
        }
        100% {
            opacity: 0;
            transform: translateY(100vh);
        }
    }
    @keyframes drop {
        90% {
            opacity: 1;
        }
        100% {
            opacity: 0;
            transform: translateY(100vh);
        }
    }
    "
{%- endmacro -%}
{# ############################################# #}
{# Macros pour générer de la neige #}
{# https://codepen.io/alphardex/pen/dyPorwJ #}
{%- macro _snow_html(num_flakes=80) -%}
    "
    {%- for i in range(0,num_flakes|int(0)) -%}
        <div class="snow"></div>
    {%- endfor -%}
    "
{%- endmacro -%}

{# Macro pour générer le CSS de la neige avec animation #}
{%- macro _snow_css(num_flakes=80) -%}
    {%- set ns = namespace(snow_output = " .snow {
            position: absolute;
            width: 10px;
            height: 10px;
            background: white;
            border-radius: 50%;
            filter: blur(0.1rem);
        }"
    ) -%}
    {%- for i in range(1, num_flakes|int(0)+2) -%}
        {%- set random_x = (_random(0,999)|int(0)*1000+_random(0,1000)|int(0)) * 0.0001 -%}
        {%- set random_offset = (_random(0,1000)|int(0)*_random(0,1000)|int(0)-100000)|int(0)  * 0.0001 -%}
        {%- set random_x_end = random_x|float(0) + random_offset|float(0) -%}
        {%- set random_x_end_yoyo = random_x|float(0) + (random_offset|float(0) / 2) -%}
        {%- set random_yoyo_time = _random(30000, 80000)|int(0)  / 1000 -%}
        {%- set random_yoyo_y = random_yoyo_time|float(0) /1 -%}
        {%- set random_scale = _random(0,10000)|int(0)  * 0.0001 -%}
        {%- set fall_duration = _random(10, 30) -%}
        {%- set fall_delay = "-"~_random(0,30)|int(0) -%}
        {%- set ns.snow_output = ns.snow_output ~ ".snow:nth-child("~i~") {
            opacity: "~"%.4f"|format(_random(100,1000)|int(0) * 0.001)~";
            transform: translate("~"%.4f"|format(random_x)~"vw, -10px) scale("~"%.4f"|format(random_scale)~");
            animation: fall-"~i~" "~fall_duration~"s "~fall_delay~"s linear infinite;
        }
        @keyframes fall-"~i~" {
        "~random_yoyo_time~"% {
            transform: translate("~"%.4f"|format(random_x_end)~"vw, "~"%.4f"|format(random_yoyo_y)~"vh) scale("~"%.4f"|format(random_scale)~");  
        }
        to {
            transform: translate("~"%.4f"|format(random_x_end_yoyo)~"vw, 100vh) scale("~"%.4f"|format(random_scale)~");
        }
        }"
        -%}
    {%- endfor -%}
    "{{ ns.snow_output }}"
{%- endmacro -%}
{# ############################################# #}
{# Macros pour générer les nuages #}
{# https://codepen.io/V17h3m/pen/Xdxxgy #}
{%- macro _cloud_html(num_clouds=15) -%}
    {%- set num_clouds = num_clouds|int(15) -%}
    "
    {# Génère des éléments HTML pour chaque nuage avec une classe spécifique pour chaque nuage #}
    {%- for i in range(num_clouds) -%}
        <div class='cloud{{i}} layer{{_random(1,3)}}'></div>
    {%- endfor -%}
    "
{%- endmacro -%}

{# Macro pour générer la couleur des nuages en fonction de la luminosité #}
{%- macro _cloud_rvb(dark=0) -%}
    {%- set d=min(dark,2)|int(0)*50 -%}
    {%- set s=min(dark,2)|int(0)*10+10 -%}
    {%- set unicolor = max(0,min(255,_random(200 -d, 250-d, s)|int(0)+5)) -%}
    {# Retourne la couleur RVB des nuages #}
    {{- [unicolor,unicolor,unicolor]|join(',') -}}
{%- endmacro -%}

{# Macro pour générer le CSS des nuages avec animation #}
{%- macro _cloud_css(num_clouds=15, complexity=7, dark=0, wind_speed=20) -%}
    {%- set ns = namespace(cloud='',extra=[]) -%}
    {%- set speed = 20/(wind_speed|float(0)+1)*60 -%} {# Calcul de la vitesse du vent (basé sur la vitesse du vent définie) #}
    
    {# Création de chaque nuage avec sa taille, position et animation de déplacement #}
    {%- for n in range(0,num_clouds) -%}
        {%- set color = _cloud_rvb(dark) -%}
        {%- set h = _random(200,400,50) -%} {# Hauteur du nuage aléatoire #}
        {%- set ns.cloud = ns.cloud ~ " .cloud"~(n|int(0)) ~"{
            position: absolute;
            width: "~ _random(h|int(200),1000,200) ~"px;
            height: "~ h ~"px;
            top: "~ _random(0,80,10) ~"%;
            left: "~ _random(-1000,1000,200) ~"px;
            background-image: 
            radial-gradient(ellipse closest-side, rgba("~color~","~ _random(5,50,5)|int(0)/100 ~") 0%, rgba("~color~",0) "~ _random(50,70,10)|int(0) ~"%)"
        -%}
        
        {# Ajoute des variations supplémentaires dans l'apparence du nuage (complexité) #}
        {%- set ns.extra=[] -%}
        {%- for c in range(0,complexity+2) -%}
            {%- set type=['ellipse','circle']|random -%}
            {%- set color = _cloud_rvb() -%}
            {%- set ns.extra = ns.extra +["radial-gradient(ellipse at "~ _random(30,70,5) ~"%  "~ _random(30,70,5) ~"%, rgba("~color~","~ _random(10,40,5)|int(0)/100 ~") 0%, rgba("~color~",0) "~ _random(15,25,5) ~"%)"] -%}
        {%- endfor -%}

        {# Fusionne l'animation de défilement des nuages avec des variations de vitesse #}
        {%- set ns.cloud = ns.cloud ~","~ ns.extra|join(',') ~ ";
            animation: to-right "~ speed|float(0)*(range(60,140,20)|random)/100 ~"s linear infinite;
            }"
        -%}
    {%- endfor -%}

    {# Ajoute l'animation pour faire déplacer les nuages de gauche à droite #}
    {%- set ns.cloud = ns.cloud ~ "
    @keyframes to-right {
        0% {transform: translateX(-10vw);}
        100% {transform: translateX(150vw);}
        filter: blur(1.5rem) brightness(0.9);
        background-blend-mode: overlay;
    }
    " -%}
    "{{ns.cloud}}"
{%- endmacro -%}
{# ############################################# #}

{# Macro pour générer le brouillard #}
{# https://codepen.io/BlogFire/pen/RwBdjvp #}
{%- macro _fog_html(num_fog=4) -%}
    {%- set num_fog = num_fog|int(15) -%}
    {%- set ns = namespace(fog="<div class='mist'>") -%}
        {%- for n in range(0,num_fog) -%}
            {%- set ns.fog = ns.fog ~ "<span style='--i: " ~ _random(1,20) ~ "'></span>" -%}
        {%- endfor -%}
    {%- set ns.fog=ns.fog ~ "</div>" -%}
    "{{ns.fog}}"
{%- endmacro -%}

{# Macro pour générer le CSS du brouillard avec animation #}
{%- macro _fog_css(color_fog='#C0C0C0') -%}
    "
    .mist {
    position: absolute;
    bottom: 65%;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    z-index: 1;
    padding: 0;
    }

    .mist span {
    display: block;
    position: relative;
    margin: 0 15px;
    min-width: 200px;
    height: 120px;
    background: {{ color_fog }};
    border-radius: 50%;
    opacity: 0;
    filter: blur(20px);
    animation: mist 15s linear infinite;
    animation-delay: calc(var(--i) * -0.5s + 1s);
    }

    @keyframes mist {
    0% {
        transform: translateX(0) scaleX(1);
        opacity: 0;
    }

    15% {
        opacity: 0.5;
    }

    50% {
        transform: translateX(-120px) translateY(-60px) rotate(20deg) scaleX(6) scaleY(3);
    }

    70% {
        opacity: 0.25;
    }

    100% {
        transform: translateX(150px) translateY(-120px) scaleX(16) scaleY(6);
    }
    }
    "
{%- endmacro -%}

{# ############################################# #}
{# Macros pour générer un éclair (lightning) #}
{# ?? #}
{%- macro _lightning_html() -%}
    "
    <div class='lightning'></div>
    "
{%- endmacro -%}

{# Macro pour générer le CSS de l'éclair avec animation #}
{%- macro _lightning_css() -%}
    "
    .lightning:before {
        content: '';
        position: absolute;
        width: 200%;
        height: 200%;
        background: #FFFFFF;
        animation: lightning 4s linear infinite;
        opacity: 0;
    }

    @keyframes lightning {
        0% {
        opacity: 0;
        }
        10% {
        opacity: 0;
        }
        11% {
        opacity: 1;
        }
        14% {
        opacity: 0;
        }
        20% {
        opacity: 0;
        }
        21% {
        opacity: 1;
        }
        24% {
        opacity: 0;
        }
        104% {
        opacity: 0;
        }
    }
    "
{%- endmacro -%}

{# ############################################# #}
{# Macro qui génére le contenu HTML/CSS sous forme d'une chaine minimaliste #}
{# layer = background ou foreground #}
{# type = html ou css #}
{%- macro generate_content(layer='foreground',type='html',demo=false) -%}
    {# Récupère l'état météo actuel (en mode démo ou en temps réel) #}
    {%- if demo -%}
        {%- set current_weather = states('input_select.weather_condition_demo') -%}
        {%- set speed = states('input_number.wind_speed_demo') -%}
        {%- set below = states('binary_sensor.sun_below_horizon_demo')-%}
    {%- else -%}
        {%- set current_weather=states(config.location)|replace("unknown","partlycloudy") -%}
        {%- set speed = state_attr(config.location,'wind_speed') -%}
        {%- set below = is_state('sun.sun', 'below_horizon')-%}
    {%- endif -%}

    {# Gestion des conditions météo exceptionnelles comme la grêle #}
    {%- set current_weather = _weather_matrix(current_weather) %}
    
    {# Initialisation d'une variable de résultat vide #}
    {%- set html = "" -%}
    {%- set css = "" -%}
    
    {# Traitement spécifique pour le fond (background) #}
    {%- if layer == "background" -%} 
        {# Vérifie si c'est la nuit et génère des étoiles #}
        {%- if below | bool -%}
            {# Présence d'étoiles #}
            {%- if 'stars' in config.conditions[current_weather].keys()|list -%}
                {# Génération du contenu étoilé sépcifique #}
                {%- set html = html ~ _stars_html(*config.conditions[current_weather]['stars']) -%}
                {%- set css = css ~ _stars_css(*config.conditions[current_weather]['stars']) -%}
            {%- else -%}
                {# Contenu étoilé par défaut #}
                {%- set html = html ~ _stars_html() -%}
                {%- set css = css ~ _stars_css() -%}
            {%- endif -%}
        {%- endif -%}

        {# Nuages pour temps partiellement nuageux/ensoleillé #}
        {%- if 'clouds' in config.conditions[current_weather].keys()|list and current_weather in config.force2background -%}
            {%- set html = html ~ _cloud_html(config.conditions[current_weather]['clouds'][0]) -%}
            {%- set css = css ~ _cloud_css(*config.conditions[current_weather]['clouds'], wind_speed = speed) -%}
        {%- endif -%}
        
        {# Génère des éclairs si nécessaire #}
        {%- if 'lightning' in config.conditions[current_weather].keys()|list -%}
            {%- set html = html ~ _lightning_html() -%}
            {%- set css = css ~ _lightning_css() -%}
        {%- endif -%}
    {# Traitement spécifique pour le premier plan (foreground) #}
    {%- elif layer == "foreground" -%}
        {# Gère les flocons de neige (si nécessaire) #}
        {%- if 'flakes' in config.conditions[current_weather].keys()|list -%}  
            {%- set html = html ~ _snow_html(config.conditions[current_weather]['flakes']) -%}
            {%- set css = css ~ _snow_css(config.conditions[current_weather]['flakes']) -%}
        {%- endif -%}
        
        {# Gère la pluie (gouttes) #}
        {%- if 'drops' in config.conditions[current_weather].keys()|list -%}
            {%- set html = html ~ _rain_html(config.conditions[current_weather]['drops']) -%}
            {%- set css = css ~ _rain_css() -%}
        {%- endif -%}

        {# Gère les nuages pour d'autres conditions #}
        {%- if 'clouds' in config.conditions[current_weather].keys()|list and not current_weather in config.force2background -%}
            {%- set html = html ~ _cloud_html(config.conditions[current_weather]['clouds'][0]) -%}
            {%- set css = css ~ _cloud_css(*config.conditions[current_weather]['clouds'], wind_speed = speed) -%}
        {%- endif -%}

        {# Gère les éclairs pour le premier plan #}
        {%- if 'lightning' in config.conditions[current_weather].keys()|list -%}  
            {%- set html = html ~ _lightning_html() -%}
            {%- set css = css ~ _lightning_css() -%}
        {%- endif -%}

        {# Gère le brouillard (fog) #}
        {%- if 'fog' in config.conditions[current_weather].keys()|list -%}  
            {%- set html = html ~ _fog_html(config.conditions[current_weather]['fog'][0]) -%}
            {%- set css = css ~ _fog_css(config.conditions[current_weather]['fog'][1]) -%}
        {%- endif -%}
    {%- endif -%}

    {# Nettoyage et jointure finale du contenu #}
    {%- if type=='html'%}
        {{' '.join(html.split())}}
    {%- elif type=='css'%}
        {{' '.join(css.split())}}
    {%- endif -%}
{%- endmacro -%}
